[["index.html", "Handbook for Handouts Preface", " Handbook for Handouts Yuanting Lu 2021-03-14 Preface Proud of being a ten-year LaTeX user, I was humbled down to the earth again when I recently learned that the easiest way to write a matrix is: \\[ \\begin{pmatrix} a &amp; b\\\\ c &amp; d \\end{pmatrix} \\] Besides pmatrix, there are also bmatrix, Bmatrix, vmatrix, and Vmatrix from the amsmath package in LaTex. Motivated by how little I know about LaTeX and R Markdown (my favourite two document preparation systems), I initiated this album to deposit the tips and examples related to creating nice handouts for undergraduate mathematics classes. The album has two parts: Part I: LaTex Part II: R Markdown Here is a quick comparison of the two systems. Both are adequate for creating nice PDF handouts. However, R Markdown can produce dynamic handouts (in HTML format) with various interactive components, which is helpful for classroom demos (especially for online teaching in the pandemic era). I am curious to see if (and how) the dynamic handouts may change the way we teach in the years to come. Table 0.1: A quick comparison of LaTex and R Markdown. TeX Support Embedded Computation Document Type LaTex Yes Sage PDF R Markdown Yes R, Python, Sage, etc PDF, HTML, etc The latest developing version of the album is available at https://albums.yuanting.lu/handbookforhandouts. PS: Bless my heart. I had been writing matrices for ten years using: \\[ \\left( \\begin{array}{cc} a &amp; b\\\\ c &amp; d \\end{array} \\right) \\] Macon, GA June, 2020 "],["1-latex-with-tikz-2d.html", "Chapter 1 LaTeX with Tikz (2D)", " Chapter 1 LaTeX with Tikz (2D) LaTeX notes are commonly shared among colleagues at workplace. But, graphs inserted in a TeX file can be easily missed during file transitions, causing compiling issues. Also, it is inconvenient to modify or update an inserted image file. Therefore, using the Tikz package to draw simple graphs in the TeX files on site can greatly resolve these issues. There are many great tutorials for Tikz everywhere. However, I often had to check multiple resources to get an ideal solution pertinent to examples in calculus classes. Therefore, I started to document my own examples for quicker reference. "],["1-1-syntax.html", "1.1 Syntax", " 1.1 Syntax 1.1.1 The environment A tikz image lives in the following environment. Note that a semi-colon is required to mark the end of a line of codes. Therefore, one line of codes in the tikz environment can spread over multiple physical lines as long as there is no semi-colon in between. \\begin{figure} \\begin{tikzpicture} code line 1; code line 2 is spreaded through two lines; \\end{tikzpicture} \\caption{} \\end{figure} 1.1.2 Functions and constants Below is a list of mathematical functions and constants. Use braces to enclose the combination of functions. For example, (\\(x\\), \\(e^{-x}\\sin x\\)) should be typed as (\\x, {e^(-\\x) * sin(\\x r)}). Functions and Constants Tikz Syntax Comments \\(\\pi\\) pi \\(e\\) e \\(\\sin x\\) sin(\\x r) \\x in radians \\(\\sin x\\) sin(\\x) \\x in degrees \\(\\ln x\\) ln(\\x) \\(\\log_2 x\\) log2(\\x) \\(e^x\\) exp(\\x) or e^\\x \\(x^2\\) pow(\\x, 2) or \\x^2 \\(\\sqrt x\\) sqrt(\\x) \\(x!\\) factorial(\\x) "],["1-2-parametric-plots-draw-and-node.html", "1.2 Parametric Plots (\\draw and \\node)", " 1.2 Parametric Plots (\\draw and \\node) Required package(s): \\usepackage{tikz}. The \\draw function can handle parametric plot. The common options (inside the brackets) are variable=: the parameter. By default, the parameter is \\x. domain=: the domain of the parameter. samples=: the length of a eqidistance sequence that spans the domain. color=: the color of the curve. Default is black. fill=: the color of the enclosed area. Arrow at the end of the curve: -&gt;, -&gt;&gt;, |&lt;-&gt;| Line style: dotted, densely dotted, loosely dotted, dashed, etc. Default is solid. Line thickness: thick, very thick, ultra thick, thin, etc. More precise control can be achieved with the option width=. The \\node function adds a label to the graph. anchor=: the place of the anchor relative to the label. Accepted key words are east, west, north, south, or combinations such as north west. scale=: the size of the text/symbol. Other notable mentions for the example below. sin(\\t r): \\t is a parameter and r indicates \\t is measured in radians. \\path behaves exactly as \\draw except it hides the curve. Coordinates can be given by cartesian (x, y) or polar form (θ:r). For example, (0, 1) is equivalent to (90:1) in polar coordinates. (90:1) circle (1pt) is a circle centered at (90:1) with a radius 1 pt. \\begin{figure}[htbp] \\begin{tikzpicture}[scale = 1] % Draw and fill a circle \\draw [variable=\\t, domain=0:2*pi, samples=200, thin, color=black] plot({cos(\\t r)}, {sin(\\t r)}); \\draw [-&gt;] (-2, 0) -- (2, 0); % Add the x-axis \\draw [-&gt;] (0, -2.2) -- (0, 2.2); % Add the y-axis \\node [anchor=north west, scale=0.5] at (1, 0) {$1$}; % Add tickmark label \\draw [fill=white] (90:1) circle (1pt); &amp; A empty circle at theta=90 and r=1, with radius 1 pt. \\path [fill=black] (30:1) circle (1pt); &amp; A filled circle at theta=30 and r=1, with radius 1 pt. \\path [fill=black] (0:{sqrt(3)}) circle (1pt); \\draw [dashed, domain=-0.5:2, very thin] plot(\\x, {1-\\x/sqrt(3)}); \\end{tikzpicture} \\end{figure} The \\draw command allows multiple parametric curves and points to be joined head to tail. In the next example, the curve starts at the point (1, 0), goes counterclockwise around a unit circle for 180 degrees, then moves clockwise along a smaller circle for another 180 degrees before finally returns to the point (1, 0). \\begin{figure}[htbp] \\begin{tikzpicture}[scale = 1] \\draw (1,0) -- plot[domain=0:pi] ({cos(\\x r)}, {sin(\\x r)}) -- plot[domain=pi:0] ({0.3*cos(\\x r)}, {0.3*sin(\\x r)}) -- cycle; \\end{tikzpicture} \\end{figure} "],["1-3-shade-an-area.html", "1.3 Shade an Area", " 1.3 Shade an Area 1.3.1 The “fill” option in \\draw Required package(s): \\usepackage{tikz}. The fill= option in the \\draw command shades the region enclosed by a curve. If the curve is not a loop, Tikz will automatically connect the head and the tail of the curve to make a loop and fill the enclosed area by the specified color. The predefined colors are black, blue, brown, cyan, gray, green, lime, magenta, olive, orange, pink, purple, red, teal, violet, white, yellow. Customized colors should be defined before been called. In the example below, the enclosed region is filled by a color named “cool”, defined in the first line of the codes using a hex RGB code 6E7696. \\definecolor{cool}{HTML}{6E7696} % Define a color named cool \\begin{figure}[htbp] \\begin{tikzpicture}[scale = 1] \\draw [fill=cool] (1,0) -- plot[domain=0:pi] ({cos(\\x r)}, {sin(\\x r)}) -- plot[domain=pi:0] ({0.3*cos(\\x r)}, {0.3*sin(\\x r)}) -- cycle; \\end{tikzpicture} \\end{figure} 1.3.2 Fill by \\tikzfillbetween Required package(s): \\usepackage{tikz, pgfplots}, \\usepgfplotslibrary{fillbetween}. Another convenient way to shade an area between two curves is to use the \\tikzfillbetween command from the pgfplots library. name path=A: Name the first curve as A. name path=B: Name the second curve as B. To hide the curves A and B, use \\path instead of \\draw . \\definecolor{cool}{HTML}{6E7696} % Define a color named cool \\begin{figure}[htbp] \\begin{tikzpicture}[scale = 1] \\draw [-&gt;] (-1, 0) -- (3, 0); % x-axis \\draw [-&gt;] (0, -0.5) -- (0, 4.5); % y-axis % Use \\path instead of \\draw in the next two lines will hide the curves. \\draw [name path=A, domain=0:2, samples=200, thick] plot({\\x}, {sqrt(\\x)}); \\draw [name path=B, domain=0:2, samples=200, thick] plot({\\x}, {\\x^2}); \\tikzfillbetween[of=A and B]{cool}; % Fills the space between A and B. \\end{tikzpicture} \\end{figure} 1.3.3 Fill by Intersection Segments Required package(s): \\usepackage{tikz, pgfplots}, \\usepgfplotslibrary{fillbetween}, \\usetikzlibrary{patterns}. When two curves intersect, they can create multiple intersection segments. For example, the left panel below shows all the intersection segments when a circle meets a triangle. The segment index depends on the flow of the parametric curves. For example, A1 and A2 are the segments on curve A right after the first and the second intersections, respectively. B0 is the segment on curve B right before the first intersection. We can always repeatedly use the draw command, for example, \\draw [red, very thick, intersection segments={of=A and B, sequence={A1}}]; to discern a segment, by repeated changing the name of segment inside sequence={ }. Once we have identified all the segments, we can use them to shade a specific region accordingly. The following codes produce the right panel below. name path=A assigns curve A. samples=362 draw a better circle. name path=B assigns curve B. In the \\fill command, the option sequence= outlines the shaded region. red!50 means 50% red. [inverse] means the segment goes against the flow of the parametric curve. pattern= specifies the angle of the shaded lines, which requires the patterns library from tikz. ` \\begin{tikzpicture}[scale=2] \\draw [name path=A, domain=0:2*pi, samples=362] plot({cos(\\x r)}, {sin(\\x r)}); \\draw [name path=B] (1, -1) -- (1, 1) -- (-1, -1) -- (1,-1); \\fill [yellow, intersection segments={of=A and B, sequence={A1--B2--A3--A4}}]; \\fill [red!50, intersection segments={of=A and B, sequence={A1--B1[reverse]}}]; \\fill [green!50, intersection segments={of=A and B, sequence={B3--A3[reverse]}}]; \\fill [blue!50, intersection segments={of=A and B, sequence={A4[reverse]--B4}}]; \\fill [black!50, intersection segments={of=A and B, sequence={A2--B2[reverse]}}, pattern= north east lines]; \\end{tikzpicture} "],["1-4-curves-on-a-grid.html", "1.4 Curves on a Grid", " 1.4 Curves on a Grid This section illustrates how to create a grid, add curves, and use for-loop. The help lines option in \\draw command creates grid lines between the lower left corner and the upper right corner points. There are two ways to bend a curve between two points. Use control points in between to pull the curve in a certain direction. For example, the curve between (-4, 0) and (-1, -1) is lifted up by (-2, 2) and dragged down by (-2, -3). Specify the outgoing and incoming angles. For example, the curve between (-1, 1) and (1, 0) departs at 60\\(\\circ\\) and arrives at 95\\(\\circ\\). The \\foreach command is the for-loop in tikz. In the index set, for example, {-3, -1, ..., 3}, the ... saves the work to type all numbers in the set. \\begin{tikzpicture}[scale = 1] \\draw[help lines] (-4, -4) grid (4, 4); \\draw [red] (-4, 0) .. controls (-2, 2) and (-2, -3) .. (-1, -1); \\draw [red] (-1, 1) to [out=60, in=95] (1, 0) to (3,3); \\draw [red, fill=red] (-1, 1) circle (1.2pt); % Solid dot \\draw [red, fill=white] (-1, -1) circle (1.2pt); % Open dot \\draw [red, fill=white] (1, 0) circle (1.2pt); % Open dot \\foreach \\t in {-3, -1, ..., 3}{ \\node [anchor=north] at (\\t, 0) {\\tiny\\t}; % x tickmarks \\node [anchor=east] at (0, \\t) {\\tiny\\t}; % y tickmarks } \\draw (-4, 0) -- (4, 0); % x-axis \\draw (0, -4) -- (0, 4); % y-axis \\end{tikzpicture} "],["2-latex-with-tikz-3d.html", "Chapter 2 LaTex with Tikz (3D)", " Chapter 2 LaTex with Tikz (3D) \\(x\\) "],["3-latex-with-sagemath.html", "Chapter 3 LaTeX with SageMath", " Chapter 3 LaTeX with SageMath LaTeX on its own does not have computational functions. When the writing involves calculations, we do the calculations in somewhere else before copy and paste the result to LaTeX. The Sagetex package, which uses the open source program SageMath, gives LaTeX the computational power so that we can write and compute at the same place. For example, with proper installation of the package, the following LaTeX code The factorial of 10 is $\\sage{factorial(10)}$. will be compiled to The factorial of 10 is 3628800. The Sagetex package was first available in 2008. "],["3-1-installation-on-mac-os.html", "3.1 Installation on Mac OS", " 3.1 Installation on Mac OS SageMath Tutorial v9.1 has a section about installing the Sagetex package. Also, inside Library/TeXShop/Engines, there is a Sage folder, which has an installation guide for Mac OS by Herbert Schulz (attached below). "],["3-2-basic-examples.html", "3.2 Basic Examples", " 3.2 Basic Examples 3.2.1 Inline Commands For inline sage commands, use \\sage{}. For example, $\\sage{diff(x^3, x, 2)}$ prints \\(6x\\), the second derivative of \\(x^3\\). 3.2.2 Blocks To execute and print a block of sage commands, use the sageblock environment. For example, \\begin{sageblock} f(x) = exp(x) * sin(2*x) \\end{sageblock} To execute and hide a block of sage commands, use the sagesilent environment. For example, \\begin{sagesilent} f(x) = exp(x) * sin(2*x) \\end{sagesilent} To print only psuedo-codes, use the sageverbatim environment. For example, \\begin{sageverbatim} f(x) = exp(x) * sin(2*x) \\end{sageverbatim} 3.2.3 Graphics To add graphs, use \\sageplot[options]{2D or 3D plot commands}. (Although the example shown here is a 2D graph, 3D graphs work in the same way. Here are the SageMath guides for 2D graphics and 3D graphics.) \\begin{figure}[h] \\sageplot[width=0.5\\textwidth]{plot(x^3, (x, -1, 1))} \\end{figure} For more delicated plots, use a sagesilent block to draw the graph, then call the graph in \\sageplot. For example, \\begin{sagesilent} a = plot(x^3, (x, -1, 1), axes_labels=[&#39;$x$&#39;, &#39;$y$&#39;], aspect_ratio=1); a += text(&#39;$y=x^3$&#39;, (0.7, 0.5), rotation=58, fontsize=&#39;20&#39;, fontweight=&#39;bold&#39;, color=&#39;red&#39;) \\end{sagesilent} \\begin{figure}[h] \\sageplot[width=0.5\\textwidth]{a} \\end{figure} "],["4-jeopardy-game.html", "Chapter 4 Jeopardy Game", " Chapter 4 Jeopardy Game A Jeopardy game can be A nice ice-breaker on the first day of class. A practice problem set on a test review day. An entertaining activity on the last day of class. "],["4-1-JeopardyGameEdit.html", "4.1 Download and Edit Template", " 4.1 Download and Edit Template The template was downloaded and minimized from Nico Vecchio’s work on StackExchange. It is attached in Appendix A.1. Changes in the following lines are essential. 4.1.1 Design the Homepage (In the Macros) If there are \\(n\\) subjects and \\(m\\) questions for each subject: (Lines 18 &amp; 32) The heights of SubjectBox and PrizeBox should be \\(\\frac 1 n\\) \\textwidth. (Lines 17 &amp; 31) Make sure (Width of SubjectBox) + (Width of all the PrizeBoxes in the same row) \\(\\le\\) 1 \\textwidth. (Line 73) In the definition of the macro \\newrow, where it says \\foreach \\i in {1, 2, 3}, change 3 to the value of \\(m\\). (Line 66) Edit the prize scores. Above the macro \\newrow, there is \\readarray{scores}{100&amp;200&amp;400}. The default scores are 100, 200, and 400. There should be \\(m\\) prizes. 4.1.2 Edit the homepage (In the Document) (Lines 113-120) Change the subject titles in each \\newrow. Keep the sequential numbers. (Lines 113-120) Add more rows or delete some rows. 4.1.3 Design the Question/Answer Pages (In the Macros) (Lines 52 &amp; 59) Make sure (Height of QuestionHeadFoot)\\(\\times\\) 2 + (Height of TextArea) \\(\\le\\) 1 \\paperheight 4.1.4 Edit the Question/Answer Pages (In the Document) (Lines 123-172) Edit the content. The next section provides detailed explanations for all the macros. You may skip that section. "],["4-2-JeopardyGameRemark.html", "4.2 (Optional)Explanations of the Template.", " 4.2 (Optional)Explanations of the Template. Load packages. Define four colorboxes: SubjectBox, PrizeBox, QuestionHeadFoot, TextArea. Define four commands: \\newrow, \\header, \\footer, \\content. 4.2.1 Load Packages The arrayjobx package has the \\newarray and \\readarray commands to conveniently store a list of strings so that each string within the list can be conveniently summoned. The tcolorbox package offers the \\newcolorbox command to set up the colored boxes in the jeopardy game. The ocgx package (Optional Content Group) provides the ocg environment to control the visibility of the prize tag in the jeopardy game. \\documentclass{beamer} \\setbeamertemplate{navigation symbols}{} \\setbeamersize{text margin left=0cm, text margin right=0cm} % No margin on the left and right. \\usepackage{arrayjobx} \\usepackage{tcolorbox} \\usepackage{ocgx} 4.2.2 Colorboxes. Define Colorboxes for suject title and prizes. \\newtcolorbox{SubjectBox}{ colback=gray!85, % Background color is 85 percent gray. colframe=white, % The color of the box frame. nobeforeafter, % Allow boxes align horizontally on the same row arc=0pt, % Round the corners of the box. Zero means squared corners. boxrule=.4pt, % The thickness of the box frame. halign=center, % Center text horizontally. valign=center, % Center text vertically. width=0.4\\textwidth, % Box width is 40 percent of the text width. height=0.12\\textheight % Box height is 12 percent of the text height, i.e., 8 rows } \\newtcolorbox{PrizeBox}{ colupper=white, % Text color. (In a colorbox, by default, there are upper and lower parts.) colback=orange, colframe=white, nobeforeafter, arc=0pt, boxrule=.4pt, halign=center, valign=center, width=.2\\textwidth, % 3 prize boxes plus 1 subject box occupy a full line. height=0.12\\textheight % 8 rows. } Define the colorbox for header and footer. \\newtcolorbox{QuestionHeadFoot}{ sidebyside, % By default, divide a colorbox into left and right region colback=orange, before=\\vskip-.2ex, % Remove the top padding after=0ex, % Set bottom padding to 0 arc=0pt, boxrule=.4pt, colframe=white, center upper, % Left region text centerred. (Because of sidebyside, upper means left.) center lower, % Right region text centerred. (Because of sidebyside, lower means right) colupper=white, collower=white, valign=center, fontupper=\\LARGE\\bfseries, fontlower=\\LARGE\\bfseries, width=\\textwidth, height=.15\\paperheight } Define the colorbox for question content. \\newtcolorbox{TextArea}{ before=, after=\\vskip-.01ex, height=0.69\\paperheight, boxrule=0pt, halign=center, valign=center } 4.2.3 New Commands The \\newrow command creates four boxes for a single row: one subject box and three prize boxes. It requires two arguments: (#1) Subject title; (#2) a sequential number for the subject. The codes create a subject box; use a for-loop to create three prize boxes. A hyperlink is displayed in each prize box, which links to the page of the specific question. The ocg environment takes three arguments. The second argument is the internal ID and the third is the visibility (1 for visible and 0 for invisible). \\newarray\\scores % Create a new array \\scores \\readarray{scores}{100&amp;200&amp;400} % Load the prize values to \\scores \\newcommand{\\newrow}[2]{ \\begin{SubjectBox} #1 \\end{SubjectBox}% &lt;-- NEVER REMOVE THIS PERCENT SIGN! It allows the color boxes sit side by side. \\foreach \\i in {1,2,3}{% &lt;-- NEVER REMOVE THIS PERCENT SIGN! It allows the color boxes sit side by side. \\begin{PrizeBox} \\begin{ocg}{s#2-\\i}{s#2-\\i}{1} %{PDF label}{internal reference label}{visibility} \\hyperlink{s#2-\\i}{\\scores(\\i)} \\end{ocg} \\end{PrizeBox}% &lt;-- NEVER REMOVE THIS PERCENT SIGN! It allows the color boxes sit side by side. } } The header and footer commands built the header and footer, respectively. \\tcblower is the dashed segmentation line between the left and right region of the QuestionHeadFoot colorbox. Header uses the QuestionHeadFoot colorbox and requires two arguments: (#1) subject title; (#2) prize. Subject title is displayed on the left. Prize is displayed on the right. Footer uses the QuestionHeadFoot colorbox and requires one argument: (#1) the prizebox/ocg internal ID. Question and answer links are displayed on the left. Done button (remove the prize from homepage) and home button (go back to homepage) are displayed on the right. \\newcommand{\\header}[2]{ \\begin{QuestionHeadFoot} #1 \\tcblower #2 \\end{QuestionHeadFoot} } \\newcommand{\\footer}[1]{ \\begin{QuestionHeadFoot} \\hyperlink{question#1}{Question} \\\\ \\hyperlink{answer#1}{Answer} \\tcblower \\hideocg{#1}{Done!} \\\\ \\hyperlink{home}{Home} \\end{QuestionHeadFoot} } The \\content command creates a question and answer page. It takes four arguments: (#1) Prizebox/ocg internal ID; (#2) subject title; (#3) prize; (#4) question and answer. \\hypertarget{reference tag}{} creates anchors at the page. &lt;1&gt; and &lt;2&gt; are beamer sequential tags for animation flow-control. They represent two sequential items on the same beamer page. \\newcommand{\\content}[4]{ \\begin{frame} \\hypertarget&lt;1&gt;{question#1}{} % Make an anchor. Land here when the Question button is clicked. \\hypertarget&lt;2&gt;{answer#1}{} % Make an anchor. Land here when the Answer button is clicked. \\hypertarget{#1}{} % Make an anchor. Land here when the prize is clicked on the homepage. \\header{#2}{#3} % Make header. #4 % Add question on part &lt;1&gt; and answer on part &lt;2&gt;. \\footer{#1} % Make footer. \\end{frame} } "],["5-pdf-editor.html", "Chapter 5 PDF Editor", " Chapter 5 PDF Editor \\(x\\) "],["6-intro-to-r-markdown.html", "Chapter 6 Intro to R Markdown ", " Chapter 6 Intro to R Markdown "],["6-1-what-is-r-markdown.html", "6.1 What is R Markdown?", " 6.1 What is R Markdown? What is R? “R is a language and environment for statistical computing and graphics.” — R-Project1 What is Markdown? “Markdown is a lightweight markup language with plain-text-formatting syntax, created in 2004 by John Gruber with Aaron Swartz.” —Wikipedia2 What is R Markdown? A algebraic answer: R Markdown \\(=\\) R \\(+\\) Markdown A naive answer: Traditionally, we process data in one computer program and write reports in another. R Markdown brings these two aspects together so that we analyze data and generate reports in the same file, the R Markdown file. An official answer: “R Markdown provides an authoring framework for data science. You can use a single R Markdown file to both (1) save and execute code; (2) generate high quality reports that can be shared with an audience.” —R Studio3 A technical answer: “In a nutshell, R Markdown stands on the shoulders of knitr and Pandoc. The former executes the computer code embedded in Markdown, and converts R Markdown to Markdown. The latter renders Markdown to the output format you want (such as PDF, HTML, Word, and so on).” —R Markdown: The Definite Guide4 R-Project.org↩︎ Markdown, by Wikipedia↩︎ R Markdown Introduction, by R Studio↩︎ R Markdown: The Definite Guide, by Yihui Xie, J. J. Allaire, Garrett Grolemund↩︎ "],["6-2-r-markdown-installation.html", "6.2 R Markdown Installation", " 6.2 R Markdown Installation Install R from https://www.r-project.org. Install RStudio IDE from https://www.rstudio.com. This is a nice platform to combine R console, R files, R workspace and any output together in one interface. In RStudio, open a new file, choose the file type R Markdown. "],["6-3-r-markdown-tutorials.html", "6.3 R Markdown Tutorials", " 6.3 R Markdown Tutorials RStudio has an official tutorial on their website: https://rmarkdown.rstudio.com/lesson-1.html The R Markdown: The Definitive Guide is a more comprehensive document. "],["7-r-markdown-pdf-handouts.html", "Chapter 7 R Markdown PDF Handouts ", " Chapter 7 R Markdown PDF Handouts "],["7-1-syntax-comparison-with-latex.html", "7.1 Syntax Comparison with LaTeX", " 7.1 Syntax Comparison with LaTeX For LaTeX users, switching to R Markdown is almost seamless. R Markdown supports LaTeX math syntax. So, mathematical writing are pretty much the same as those in the LaTex. Inline math: $\\sqrt{x}$ Display format: $$f(x)=x^2$$ or \\[ f(x)=x^2 \\]. The only minor difference is that any math environment has to be placed inside math mode. For example, \\[ \\begin{pmatrix} a &amp; b \\\\ c &amp; d \\end{pmatrix} \\] Most LaTeX syntax works fine R Markdown. For example, if the LaTeX color package is loaded in R Markdown, then we can use \\textcolor{red}{texts} to change the color of texts to red. Of course, R Markdown has its own set of syntax as well (for non-LaTex users). The following table compares some common text syntax between LaTex and R Markdown. Table 7.1: A quick comparison of LaTex and R Markdown. Task LaTeX R Markdown Bold {\\bf xyz} **xyz** Italic {\\it xyz} *xyz* Footnote a\\footnote{b} a^[b] Superscript a\\textsuperscript{2} a^2^ Subscript a\\textsubscript{2} a~2~ Text Backslash \\textbackslash \\\\ Inline verbatim \\verb&amp;#124;code&amp;#124; `code` Hyperlink \\href{url}{text} ![text](url) "],["7-2-loading-latex-packages-in-r-markdown.html", "7.2 Loading LaTeX Packages in R Markdown", " 7.2 Loading LaTeX Packages in R Markdown If we only need a couple of LaTeX packages, we can add them one by one in the YAML header.5 --- title: &quot;&quot; output: pdf_document: extra_dependencies: [&quot;amsmath&quot;, &quot;color&quot;] --- To load a large number of packages more efficiently, try --- title: &quot;&quot; subtitle: &quot;&quot; output: pdf_document: includes: in_header: [&quot;TexPackages.tex&quot;, &quot;TexMacros.tex&quot;] latex_engine: xelatex --- where TexPackages.tex has all packages, for example, \\usepackages{amsmath} \\usepackages{color} and TexMacros.tex has all macros, such as \\renewcommand{\\Re}{\\operatorname{Re}} \\renewcommand{\\Im}{\\operatorname{Im}} \\newcommand{\\Arg}{\\operatorname{Arg}} How to include LaTeX package in R Markdown, by StackExchange↩︎ "],["7-3-the-desolve-package-for-differential-equations.html", "7.3 The DeSolve Package for Differential Equations", " 7.3 The DeSolve Package for Differential Equations library(deSolve) source(&#39;~/Dropbox/Project-R/MyToolbox/combineMAT.r&#39;) # combine matrices w diff size source(&#39;~/Dropbox/Project-R/MyToolbox/DrawAxes.r&#39;) # Draw axes in the center EQNS &lt;- function(t, status, parms){ with(as.list(status),{ dX &lt;- 2*Y-2*X^2 dY &lt;- 4*X-Y-3*X^2 list(c(dX,dY)) }) } dt &lt;- 0.01; ## Step size in t n &lt;- 5 ## Number of initial value sets # Each row is one initial value set in the form of # X0, Y0, t_min, t_max, delta_t # If t_min &lt; t_max, solve ode backwards ivp &lt;- matrix(c(0.001, -0.0001, 0, 5, dt, -0.001, -0.001, 3, 0, -dt, -0.001, -0.001, 0, 2.8, dt, 0.001, -0.001, 2.37, 0, -dt, -1, 3.7, 0, 5, dt), nrow = n, byrow = TRUE) # Numeric solution userdata &lt;- matrix(NA) for (i in 1:n){ status &lt;- c(X = ivp[i,1],Y = ivp[i,2]) t &lt;- seq(ivp[i,3],ivp[i,4],ivp[i,5]) out &lt;- ode(y = status, times = t, func = EQNS, parms = NULL) # &quot;out&quot; has three columns: t, x, y # Using out[, -1] excludes the first column, which is t. # First column of userdata are sequential numbers 1, 2, 3, ... # Rest odd columns of userdata is y # Even columns of userdata is x # Did not use cbind because all the &#39;out&#39; from ode are different in row dimension # Did not use rbind for the convenience of graphing userdata &lt;- combineMAT(userdata,out[,-1]) } # Setting the range # Find the max of the absolute value of x and y separately # The factor 0.7 is from trial-and-error to make the plot look nice xabs &lt;- 0.7 * max(abs(userdata[,seq(2,2*n,2)])) yabs &lt;- max(abs(userdata[,seq(3,2*n+1,2)])) # Blank plot with axes labels DrawAxes(-xabs, xabs, -yabs, yabs, &#39;x&#39;,&#39;y&#39;, 0) axis(1,at = c(-3,-2,-1,1,2,3),hadj = 0.5, padj = -1, lwd.ticks = 2, tick = TRUE, tck = 0.015, pos = 0) axis(4, at=c(-3,-2,-1,1,2,3), padj = 0.5, tick = TRUE, labels = TRUE, las = 2, tck = -0.01, pos = 0) # Draw solution curves for (i in 1:n){ par(new=TRUE) # Add to existing plot plot(userdata[,2*i], userdata[,2*i+1], type = &#39;l&#39;, col=&#39;red&#39;, xlim = c(-xabs, xabs), ylim = c(-yabs, yabs), xlab = &#39;&#39;, ylab = &#39;&#39;,axes = FALSE) } # Draw points of random initial conditions par(new=TRUE) # Add to existing plot plot(c(3, 3, -1, -3), c(1, -1, 3, 1), type = &#39;p&#39;, pch=20, cex=0.7, xlim = c(-xabs,xabs), ylim = c(-yabs,yabs), xlab = &#39;&#39;, ylab = &#39;&#39;,axes = FALSE) "],["8-r-markdown-html-handouts.html", "Chapter 8 R Markdown HTML Handouts", " Chapter 8 R Markdown HTML Handouts Do you still remeber the first class when we moved online (probably in Zoom) that you enthusiasticly demonstrated a super cool animated video to your students but frustrated to see that for five minutes no one seemed to follow, and it turned out the window you shared with your students was a PDF file so that the animated show was all exclusive to yourself? Well, the problem can be remediated if all the countable windows (PDF, animations, videos, apps, websites, etc.) that we need to manage are all in the same place, a dynamic document that houses many things that we need. A little very basic knowledge of HTML will be sufficient. All tags come in pairs (just like we always do \\begin{ } and \\end{ } in LaTex), e.g., &lt;style&gt; and &lt;/style&gt; &lt;div&gt; and &lt;/div&gt; &lt;iframe&gt; and &lt;/iframe&gt; As the name suggested, anything inside &lt;style&gt; and &lt;/style&gt; are decorations. We can define an object in there (e.g., .video-container. Note there is a dot in the front of the words6) and then initiate the object by calling &lt;div class=\"video-container\"&gt;, put in contents, and wrap it up by calling &lt;/div&gt;. iframe stands for inline frame. We can use it as a frame to hang up (i.e., display) files, pictures, web pages, etc. Any code between /* and */ are comments and thus has no effect on the output However, The definition of iframe inside the style tags does not need a dot because we directly call the iframe by its own tags.↩︎ "],["8-1-embed-a-static-file.html", "8.1 Embed a Static File", " 8.1 Embed a Static File A simple solution is to use the built-in syntax of R Markdown. ![](Path to file){width=100% height=600} In the above, width=“100%” means the inserted file is as wide as the page contents. The height can be manually adjusted to the desired length. Below is the famous R Markdown cheatsheet. Alternatively, we can use HTML iframe to attach images or PDF files: &lt;iframe src=&quot;file-name.pdf&quot; width=&quot;100%&quot; height=&quot;600px&quot;&gt; &lt;/iframe&gt; The advantage of using the HTML iframe directly is that we can add more options. For example, if we add #page= to the end of the PDF file name, src=“file-name.pdf#page=2”, the iframe window will display the second page of the PDF file. The reader can still navigate to other pages using the scroll bar. "],["8-2-embed-a-video.html", "8.2 Embed a Video", " 8.2 Embed a Video We can also use the iframe tool discussed in the previous section to insert videos. YouTube videos are used as examples. Check the link formats with the platform if another platform is chosen. Create an HTML container (e.g., define a new class named video_container) to wrap the iframe and configue an HTML iframe. &lt;style type=&quot;text/css&quot;&gt; .video_container { position: relative; padding-bottom: 56.25%; } iframe{ position: absolute; top: 0; left: 0; width: 100%; /* Full width of the video container */ height: 100%; /* Full height of the video container */ } &lt;/style&gt; .video_container { position: relative; width: 100%; padding-bottom: 56.25%; } iframe{ position: absolute; top: 0; left: 0; width: 100%; /*Full width of the video container*/ height: 100%; /*Full height of the video container*/ } Find the video ID of the YouTube video, which is the part after v= in the URL of the vedio. For example, if the URL is https://www.youtube.com/watch?v=2kbM96Jr4nk, the ID is 2kbM96Jr4nk. Load the video in the iframe. Paste the ID of the video right after https://www.youtube.com/embed/ in the src part.7 The Option frameborder=\"0\" hides the border of the video frame. &lt;div class=&quot;video_container&quot;&gt; &lt;iframe frameborder=&quot;0&quot; src=&quot;https://www.youtube.com/embed/2kbM96Jr4nk&quot;&gt; &lt;/iframe&gt;&lt;/div&gt; Here is one of my favorite of all times. (Optional) Set the video_container padding-bottom attribute to be the reciprocal of the aspect ratio of the video.8 For example, Aspect Ratio of Video Padding-Bottom 1:1 100% 16:9 56.25% 4:3 75% HTML YouTube Videos, w3schools↩︎ How to Preserve the Player Aspect Ratio on a Responsive Page, Daily Motion↩︎ "],["8-3-embed-web-page.html", "8.3 Embed a Web Page", " 8.3 Embed a Web Page The R Markdown knitr package has an existing function include_url to call the HTML iframe. So, we can simply use it to embed a web page. Insert an r chunk and add the function knitr::include_url( ) in the r code chunk. ```{r out.width=&#39;100%&#39;} knitr::include_url(&#39;https://www.desmos.com/calculator&#39;, height=&#39;600px&#39;) ``` Adjust the width and height of the web page window. out.width=‘100%’ means the web page window is as wide as the page content. height=‘600px’ means the height of the web page is 600 pixels. Caution: When using web page, it is better to login your web page account (e.g., Desmos). Otherwise, you lose your work when you reload the page. Now you should see the Desmos calculator web page in here. If the content of the web page needs resizing, we will have to work directly with the iframe like we did in the previous section. Here is the awesome Slope Field app for ordinary differential equations, designed by Professor Darryl Nester from Bluffton University. The content has been rescaled to fix this page. See implimentation in Appendix B.1. #slope-field-frame { width: 1050px; height: 800px; border: 2px; } #slope-field-frame { zoom: 0.75; -moz-transform: scale(0.75); /*Firefox*/ -moz-transform-origin: 0 0; /*Firefox*/ -o-transform: scale(0.75); /*Opera*/ -o-transform-origin: 0 0; /*Opera*/ -webkit-transform: scale(0.75); /*Chrom/Safari*/ -webkit-transform-origin: 0 0; /*Chrom/Safari*/ } @media screen and (-webkit-min-device-pixel-ratio:0) { #slope-field-frame { zoom: 1; } } "],["8-4-embed-a-web-app.html", "8.4 Embed a Web App", " 8.4 Embed a Web App Insert an r chunk. ```{r} ``` Add the function knitr::include_app( ) in the r code chunk. ```{r out.width=&#39;100%&#39;} knitr::include_app(&#39;https://3.19.223.22:3838/sta126-test/&#39;, height=&#39;600px&#39;) ``` Adjust the width and height of the web page window. out.width=‘100%’ means the web page window is as wide as the page content. height=‘600px’ means the height of the web page is 600 pixels. Here is an example of a R Shiny app. Once the last four digits of a student’s Mercer University ID is typed in, the app generates randomized datasets for each student on an introductory statistics test. Students can use the tabs to preview the datasets for the two questions and use the download buttons to save the datasets as csv files. It is also coded in a way that half the students do confidence intervals on Question 7 and hypothesis tests on Question 8, while the other half do hypothesis tests on Question 7 and confidence intervals on Question 8. The codes for the app are explained in the appendix. "],["8-5-embed-sagemath.html", "8.5 Embed SageMath", " 8.5 Embed SageMath R Markdown does not support SageMath. So, we actually embed SageMath in HTML,9 which is supported by R Markdown. SageMath is an open source program with Powerful symbolic calculation. Simple syntax that draws pretty 3D interactive graphs. Interactive component for building widgets. Plus, there is a free server called SageMathCells that can render all the calculations online with reasonable speed. Let’s see how to take the advantage of all these three aspects. Create a blank sageHeader.html file, then paste the following HTML codes and save the file1011. The purposes of the codes are Send all interactive calcuation to the SageMathCells server. Defines two HTML classes: The class sage_all has a Sage code editor, an evaluation button and the output panel. The class sage_simple only displays the result panel. &lt;!DOCTYPE HTML&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width&quot;&gt; &lt;script src=&quot;https://sagecell.sagemath.org/static/embedded_sagecell.js&quot;&gt;&lt;/script&gt; &lt;script&gt;$(function () { sagecell.makeSagecell({inputLocation: &#39;div.sage_all&#39;, linked: &#39;false&#39;, autoeval: &#39;false&#39;, evalButtonText: &#39;Evaluate&#39;}); sagecell.makeSagecell({inputLocation: &#39;div.sage_simple&#39;, autoeval: &#39;true&#39;, hide: [&#39;editor&#39;,&#39;evalButton&#39;, &#39;permalink&#39;]}); }); &lt;/script&gt; &lt;/head&gt; &lt;/html&gt; Create a R Markdown file and Source the sageHeader.html file in a R chunk using the htmltools package. Suppose the R Markdown file and the html file are in the same folder: ```{r eval=TRUE, echo=FALSE} htmltools::includeHTML(&quot;sageHeader.html&quot;) ``` If we’d like the audience to type/modify the Sage codes, use the sage_all class. Insert the following code chunk in R Markdown to output a Sage editor and an evaluation buttonin. (There is a button in the far right of the editor, which makes the editor full screen for easy editing.) ```{block, type=&quot;sage_all&quot;} &lt;script type=&quot;text/x-sage&quot;&gt; diff(sin(x)^2, x) &lt;/script&gt; ``` Then it shows the derivative of \\(\\sin^2(x)\\) from the code chunk we typed in. Next, we can modify the editor and evaluate the modified codes. If we only want to display a dynamic output (e.g., a 3D graph),, use the sage_simple class. The following HTML codes in the R Markdown document will only display a hypobolic paraboloid. (It may take a while for the 3D image to show up. Refresh the browser might help.) ```{block, type=&quot;sage_simple&quot;} &lt;script type=&quot;text/x-sage&quot;&gt; # Declare variables var(&#39;u,v&#39;) # Choose the jet colormap. color_map = colormaps.jet # c is the color function, whose range must be normalized (converted to between 0 and 1). def c(u,v): return ((u^2-v^2)+1)/2 # 3d plot and settings surf = parametric_plot3d( [u, v, u^2-v^2], (u, -1, 1), (v, -1, 1), color = (c, color_map)) show(surf, viewer=&#39;threejs&#39;, frame=False) &lt;/script&gt; ``` Finally, don’t forget the wonderful interactive components of Sage.12 Below is an example of volume by revolution (cylindrical shells). SageMath and 3D Models in Webpages, by Simon Willerton↩︎ Embedding Sage to HTML, by SageMath↩︎ Dr. Christian Bar’s colletion, University of Potsdam, Germany↩︎ SageMath Widgets, by Jeff Denny and Yuanting Lu↩︎ "],["8-6-animations.html", "8.6 Animations", " 8.6 Animations The gifski package can assemble a set of sequential plots into a GIF image, and thus an animation. Install the gifski package. Insert a R chunk. Add animation.hook=gifski in the chunk option. Set the time interval between frames, e.g., interval=0.25. Set cache=TRUE to speed up the processing time. ```{r, animation.hook=&quot;gifski&quot;, interval=0.25, cache=TRUE} ``` Add a set of sequential plots into the R chunk through a for-loop. # Define the function f(x)=sin(x)/x f &lt;- function(x){ return(sin(x) / x) } # Animation created from a for-loop for (n in 1:20) { plot(1:n, f(1:n), pch=16, # Use a filled dot for each point xlim = c(0,21), # The range of the x-axis ylim = c(-1, 1), # The range of the y-axis main = &#39;Sequence&#39;, # Title xlab = &#39;x&#39;, # x label ylab = &#39;sin(x)/x&#39; # y label ) } "],["8-7-use-tabs.html", "8.7 Use Tabs", " 8.7 Use Tabs We can use more than one of the tools we discussed earlier in the same place by using tabs. For example, the following code produces two panels, a writing board and a graphic calculator. # {.tabset -} ## Board Add a writing board. ## Calculator Add a graphic calculator # {-} "],["9-sagemath.html", "Chapter 9 SageMath ", " Chapter 9 SageMath "],["9-1-plots-2d.html", "9.1 Plots (2D)", " 9.1 Plots (2D) 9.1.1 Basic Plots The plot and the parametric_plot functions are sufficient for basic plots. The default variable for the domain is \\(x\\). Other parameters need to be declared in advance. For example, \\(t\\) is used in the parametric_plot function, so we do var('t') beforehand. Both functions come with a wide range of options, such as color, thickness, and linestyle. The complete list of options can be looked up by ?plot. The graphic object can be put together in one variable (e.g., fig). Use = for initiating the first plot and += for adding subsequent plots. The show function draws graphic object. Axes limits, axes ticks, and aspect ratio can be defined inside the show function. 9.1.2 Popular Objects Popular geometric objects such as lines, segments, and circles have predefined graphic commands. line( [ ( x1, y1 ), ( x2, y2 ) ] ) list_plot( [ ( x1, y1 ), ( x2, y2 ), ( x3, y3 ) ], plotjoined = True) circle( ( xcenter, ycenter ), radius) 9.1.3 Text The text function adds text strings to the graph. Simply use text( \"string\", (x, y)). Math symbols in LaTeX are supported. For example, text(r\"$\\sqrt{x}$\", (1, 1)). The letter r forces the string to be interpreted as a raw string. Rotation. The option rotation = 45 will rotate the text string counterclockwise by 45°. Anchor. The anchor of the string is pinned by the options horizontal_alignment = \"left\"/\"right\" or vertical_alignment = \"top\"/\"bottom\". Other common options such as color and fontsize are also supported. 9.1.4 Fill a Region There are a few ways to shade a region. Use plot. The option fill = {0:[1]} shades the region between curves. 0 is the first plot and [1] is the second plot. Use plot. The option fill = \"min\" shades the region below the curve all the way to its minimum. Similarly, the option fill = \"max\" shades the region above the curve up to its maximum. Use polygon. Use parametric_plot. Use line segments. "],["9-2-plots-3d.html", "9.2 Plots (3D)", " 9.2 Plots (3D) "],["9-3-widgets.html", "9.3 Widgets", " 9.3 Widgets "],["A-latex-additional-examples.html", "A LaTeX: Additional Examples ", " A LaTeX: Additional Examples "],["A-1-JeopardyGameDownload.html", "A.1 Jeopardy Template", " A.1 Jeopardy Template [Back to Section 4.1 for suggested edits.] [Back to Section 4.2 for full comments.] If you move the cursor to the top-right corner of the gray area (code chunk), there is a copy button. Please copy and paste it into a blank TeX file. \\documentclass{beamer} \\setbeamertemplate{navigation symbols}{} \\setbeamersize{text margin left=0cm, text margin right=0cm} \\usepackage{arrayjobx} \\usepackage{tcolorbox} \\usepackage{ocgx} % Define the subject boxes, i.e., the first column \\newtcolorbox{SubjectBox}{ colback=gray!85, % Background color is 85 percent gray. colframe=white, % The color of the box frame. nobeforeafter, % Allow boxes align horizontally on the same row arc=0pt, % Round the corners of the box. Zero means squared corners. boxrule=.4pt, % The thickness of the box frame. halign=center, % Center text horizontally. valign=center, % Center text vertically. width=0.4\\textwidth, % Box width is 40 percent of the text width. height=0.12\\textheight % Box height is 12 percent of the text height, i.e., 8 rows } % Define the prize boxes, i.e., rest of the columns \\newtcolorbox{PrizeBox}{ colupper=white, % Text color. (In a colorbox, by default, there are upper and lower parts.) colback=orange, colframe=white, nobeforeafter, arc=0pt, boxrule=.4pt, halign=center, valign=center, width=.2\\textwidth, % 3 prize boxes plus 1 subject box occupy a full line. height=0.12\\textheight % 8 rows. } % Define the colorbox shared by the header and footer \\newtcolorbox{QuestionHeadFoot}{ sidebyside, % By default, divide a colorbox into left and right region colback=orange, before=\\vskip-.2ex, % Remove the top padding after=0ex, % Set bottom padding to 0 arc=0pt, boxrule=.4pt, colframe=white, center upper, % Left region text centerred. (Because of sidebyside, upper means left.) center lower, % Right region text centerred. (Because of sidebyside, lower means right) colupper=white, collower=white, valign=center, fontupper=\\LARGE\\bfseries, fontlower=\\LARGE\\bfseries, width=\\textwidth, height=.15\\paperheight } % Define the colorbox used by the question/answer content \\newtcolorbox{TextArea}{ before=, after=\\vskip-.01ex, height=0.69\\paperheight, boxrule=0pt, halign=center, valign=center } \\newarray\\scores % Create a new array \\scores \\readarray{scores}{100&amp;200&amp;400} % Load the prize values to \\scores % Shortcut to create one row at a time on the homepage \\newcommand{\\newrow}[2]{ \\begin{SubjectBox} #1 \\end{SubjectBox}% &lt;-- NEVER REMOVE THIS PERCENT SIGN! It allows the color boxes sit side by side. \\foreach \\i in {1,2,3}{% &lt;-- NEVER REMOVE THIS PERCENT SIGN! It allows the color boxes sit side by side. \\begin{PrizeBox} \\begin{ocg}{s#2-\\i}{s#2-\\i}{1} %{PDF label}{internal reference label}{visibility} \\hyperlink{s#2-\\i}{\\scores(\\i)} \\end{ocg} \\end{PrizeBox}% &lt;-- NEVER REMOVE THIS PERCENT SIGN! It allows the color boxes sit side by side. } } % Shortcut to create header of a question page \\newcommand{\\header}[2]{ \\begin{QuestionHeadFoot} #1 \\tcblower #2 \\end{QuestionHeadFoot} } % Shortcut to create the footer of a question page \\newcommand{\\footer}[1]{ \\begin{QuestionHeadFoot} \\hyperlink{question#1}{Question} \\\\ \\hyperlink{answer#1}{Answer} \\tcblower \\hideocg{#1}{Done!} \\\\ \\hyperlink{home}{Home} \\end{QuestionHeadFoot} } % Create a question page \\newcommand{\\content}[4]{ \\begin{frame} \\hypertarget&lt;1&gt;{question#1}{} % Make an anchor. Land here when the Question button is clicked. \\hypertarget&lt;2&gt;{answer#1}{} % Make an anchor. Land here when the Answer button is clicked. \\hypertarget{#1}{} % Make an anchor. Land here when the prize is clicked on the homepage. \\header{#2}{#3} % Make header. #4 % Add question on part &lt;1&gt; and answer on part &lt;2&gt;. \\footer{#1} % Make footer. \\end{frame} } \\begin{document} \\begin{frame} \\hypertarget{home}{} % set up the anchor for the Home button \\vspace*{.23cm} \\newrow{u-substitution}{1} \\newrow{Trig Substitution}{2} \\newrow{Integration by Parts}{3} \\newrow{Improper Integrals}{4} \\newrow{Volume}{5} \\newrow{Geometric Series}{6} \\newrow{Limit of Sequences}{7} \\newrow{Convergence of Series}{8} \\end{frame} \\content {s1-1} % Question internal ID. Subject 1, question 1. {u-Substitution} % Subject title {100}{ % Prize of the question \\begin{TextArea} \\only&lt;1&gt;{ % Adding the question In the integral $\\int \\frac{(\\ln x)^2}{x}\\, dx$ which term should be replaced as $u$? \\begin{enumerate}[A).] \\item $\\ln x$ \\item $1/x$ \\end{enumerate} } \\only&lt;2&gt;{ % Adding the answer $\\ln x$ } \\end{TextArea} } \\content {s1-2} % Question internal ID. Subject 1, question 2. {u-Substitution} % Subject title {200}{ % Prize of the question \\begin{TextArea} \\only&lt;1&gt;{ % Adding the question In the integral $\\int \\sin x\\sqrt{1+\\cos x}\\, dx$, which substitution does NOT work? \\begin{enumerate}[A).] \\item $u=\\sin x$ \\item $u=\\cos x$ \\item $u=1+\\cos x$ \\end{enumerate} } \\only&lt;2&gt;{ % Adding the answer $\\sin x$ } \\end{TextArea} } \\content {s1-3} % Question internal ID. Subject 1, question 3. {u-Substitution} % Subject title {400}{ % Prize of the question \\begin{TextArea} \\only&lt;1&gt;{ % Adding the question In the integral $\\int \\frac{x}{1+x^4}\\, dx$, what should be replaced as $u$? } \\only&lt;2&gt;{ % Adding the answer $u = x^2$ } \\end{TextArea} } \\end{document} "],["B-r-markdown-additional-examples.html", "B R Markdown: Additional Examples ", " B R Markdown: Additional Examples "],["B-1-embed-web-page-rescale.html", "B.1 Embed a Web Page: Rescale the Contents", " B.1 Embed a Web Page: Rescale the Contents [Back to Section 8.3] To rescale the contents of a web page and fit it into an iframe:1314 Find out the desired dimension of the web page. For example, if we do a screenshot of the Slope Field app web page in a Google Chrome browser, we will see the full width is a little shy of 1050 pixels. Set up an HTML container (e.g., slope-field-container)and config an iframe (e.g., slope-field-iframe) with the desired dimension. The zoom factor in this example is 0.75, which was obtained from trial-and-error. It allows the full width of the web page to be displayed in the iframe (i.e., no need for a horizontal scroll bar). Adjust this factor to meet the desired outcome in each individual example. &lt;style&gt; /* Set up container */ #slope-field-container { position: relative; width: 100%; padding-bottom: 50%; } /* Set up iframe */ #slope-field-frame { width: 1050px; /* Desired height */ height: 800px; /* Desired width */ border: 2px; /* Border thickness */ zoom: 0.75; /* Zoom factor obtained from trial-and-error*/ -moz-transform: scale(0.75); /* Scale for Firefox*/ -moz-transform-origin: 0 0; -o-transform: scale(0.75); /* Scale for Opera*/ -o-transform-origin: 0 0; -webkit-transform: scale(0.75); /* Scale for Chrom/Safari*/ -webkit-transform-origin: 0 0; } @media screen and (-webkit-min-device-pixel-ratio:0) { #slope-field-frame { zoom: 1; } } &lt;/style&gt; Load the web page in the iframe. &lt;div id=&quot;slope-field-container&quot;&gt; &lt;iframe id=&quot;slope-field-frame&quot; src=&quot;https://homepages.bluffton.edu/~nesterd/apps/slopefields.html&quot;&gt; &lt;/iframe&gt; &lt;/div&gt; The difference of using class and id in HTML div is that id is typically used for an individual object (e.g., the desired dimension of a web page changes from case to case) while class is used to define a group with common settings. How to Scale the Content of iframe Element, by w3docs↩︎ How to Scale iFrame Content in IE, Chrome, Firefox, and Safari, by Collaboration One Thirty Three↩︎ "],["references.html", "References", " References "]]
